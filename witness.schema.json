{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$defs": {
    "producer": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the tool that produced the invariant."
        },
        "version": {
          "type": "string",
          "description": "Version of the tool."
        },
        "configuration": {
          "type": "string",
          "description": "Configuration in which the tool ran. Consider using this property if there are substantially different configurations of the tool."
        },
        "description": {
          "type": "string",
          "description": "Additional description. Use this property for any information that does not fit into any of the above properties."
        },
        "command_line": {
          "type": "string",
          "description": "Command line with which the tool ran. Specifying the exact command possibly increases reproducibility."
        }
      }
    },
    "task": {
      "type": "object",
      "required": [
        "input_files",
        "input_file_hashes",
        "specification",
        "data_model",
        "language"
      ],
      "properties": {
        "input_files": {
          "description": "File(s) that were given as input to the verfier. Each file pattern must represent exactly one input file.",
          "type": "array",
          "items": {
            "type": "string",
            "description": " Bash-compliant file-name pattern"
          }
        },
        "input_file_hashes": {
          "type": "object",
          "description": "Mapping of each input file to its SHA-256 hash. Every file-name pattern listed in `input_files` must appear in this property.",
          "additionalProperties": {
            "type": "string",
            "pattern": "[0-9a-fA-F]{64}"
          }
        },
        "specification": {
          "type": "string",
          "description": "Specification in [SV-COMP format](https://sv-comp.sosy-lab.org/2021/rules.php) against which the program was analyzed for producing the entry."
        },
        "data_model": {
          "description": "Data model that was assumed for the input program.",
          "enum": [
            "ILP32",
            "LP64"
          ]
        },
        "language": {
          "description": "Source language of the input files.",
          "enum": [
            "C"
          ]
        }
      }
    },
    "metadata": {
      "type": "object",
      "required": [
        "format_version",
        "uuid",
        "creation_time",
        "producer",
        "task"
      ],
      "properties": {
        "format_version": {
          "type": "string",
          "description": "Version of the verification-entries format that the entry is formatted in."
        },
        "uuid": {
          "type": "string",
          "description": "Unique identifier of the entry ([RFC4122](https://www.ietf.org/rfc/rfc4122.txt) defines the UUID format).",
          "format": "uuid"
        },
        "creation_time": {
          "type": "string",
          "description": "Date and time when the entry (not the file) was created.",
          "format": "date-time"
        },
        "producer": {
          "description": "Tool that produced the entry.",
          "$ref": "#/$defs/producer"
        },
        "task": {
          "description": "Verification task during which the entry was produced.",
          "$ref": "#/$defs/task"
        }
      }
    },
    "metadata-certificate": {
      "type": "object",
      "required": [
        "format_version",
        "uuid",
        "creation_time",
        "producer"
      ],
      "properties": {
        "format_version": {
          "type": "string",
          "description": "Version of the verification-entries format that the entry is formatted in."
        },
        "uuid": {
          "type": "string",
          "description": "Unique identifier of the entry ([RFC4122](https://www.ietf.org/rfc/rfc4122.txt) defines the UUID format).",
          "format": "uuid"
        },
        "creation_time": {
          "type": "string",
          "description": "Date and time when the entry (not the file) was created.",
          "format": "date-time"
        },
        "producer": {
          "description": "Tool that produced the entry.",
          "$ref": "#/$defs/producer"
        }
      }
    },
    "location": {
      "type": "object",
      "required": [
        "file_name",
        "file_hash",
        "line",
        "column",
        "function"
      ],
      "properties": {
        "file_name": {
          "type": "string",
          "description": "Name of the file containing the loop where the invariant holds. Must be present in `task.input_files`."
        },
        "file_hash": {
          "type": "string",
          "description": "SHA-256 hash of the file containing the loop where the invariant holds.",
          "pattern": "[0-9a-fA-F]{64}"
        },
        "line": {
          "type": "integer",
          "description": "Line where the invariant holds (starting with 1).",
          "minimum": 1
        },
        "column": {
          "type": "integer",
          "description": "Column where the invariant holds in that line (starting with 0). For example, if `column` has value `0` then the invariant holds _before_ the first source-code token of the line.",
          "minimum": 0
        },
        "function": {
          "type": "string",
          "description": "Name of the function in which the invariant holds."
        }
      }
    },
    "invariant": {
      "type": "object",
      "required": [
        "string",
        "type",
        "format"
      ],
      "properties": {
        "string": {
          "type": "string",
          "description": "The actual invariant formula."
        },
        "type": {
          "description": "How to interpret `string`. The following values are supported:\n\n* _assertion_: Has the C semantics of `assert(<string>)` inserted at the specified `location`.",
          "enum": [
            "assertion"
          ]
        },
        "format": {
          "description": "Format of the string. The following values are supported:\n\n* _C_: Expression in C language.",
          "enum": [
            "C"
          ]
        }
      }
    },
    "target": {
      "type": "object",
      "required": [
        "uuid",
        "type",
        "file_hash"
      ],
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Unique identifier of the entry ([RFC4122](https://www.ietf.org/rfc/rfc4122.txt) defines the UUID format).",
          "format": "uuid"
        },
        "type": {
          "type": "string",
          "description": "`entry_type` of the targeted entry."
        },
        "file_hash": {
          "type": "string",
          "description": "SHA-256 hash of the file containing the loop where the invariant holds.",
          "pattern": "[0-9a-fA-F]{64}"
        }
      }
    },
    "certification": {
      "type": "object",
      "required": [
        "string",
        "type",
        "format"
      ],
      "properties": {
        "string": {
          "type": "string",
          "description": "The actual certification result."
        },
        "type": {
          "description": "How to interpret `string`. The following values are supported:\n\n* _verdict_: whether the targeted entry was confirmed or rejected.",
          "enum": [
            "verdict"
          ]
        },
        "format": {
          "description": "Format of the string. The following values are supported:\n\n* _confirmed | rejected_: either \"confirmed\" or \"rejected\".",
          "enum": [
            "confirmed | rejected"
          ]
        }
      }
    }
  },
  "type": "array",
  "items": {
    "oneOf": [
      {
        "title": "Loop Invariant Entry",
        "description": "An loop invariant entry",
        "type": "object",
        "required": [
          "entry_type",
          "metadata",
          "location",
          "loop_invariant"
        ],
        "properties": {
          "entry_type": {
            "const": "loop_invariant",
            "description": "The type of this entry. The format is specific to the entry type. In this case, the entry type declares that the entry contains a loop invariant that holds at some location in a program."
          },
          "metadata": {
            "$ref": "#/$defs/metadata",
            "description": "Additional information about the \"environment\" in which the entry was produced."
          },
          "location": {
            "$ref": "#/$defs/location",
            "description": "Location in the source code to which the entry refers, i.e., at which the loop invariant holds."
          },
          "loop_invariant": {
            "$ref": "#/$defs/invariant",
            "description": "Actual loop invariant."
          }
        },
        "examples": [
          {
            "entry_type": "loop_invariant",
            "metadata": {
              "format_version": 0.1,
              "uuid": "91023a0f-9f45-4385-88c4-1152ade45537",
              "creation_time": "2021-05-05T13:18:43.000Z",
              "producer": {
                "name": "CPAchecker",
                "version": "2.0.1-svn",
                "configuration": "(Optional) svcomp21--04-kInduction",
                "description": "(Optional)",
                "command_line": "(Optional)"
              },
              "task": {
                "input_files": [
                  "multivar_1-1.c"
                ],
                "input_file_hashes": {
                  "multivar_1-1.c": "511f45a8d763ef520f6d92e4135c8572805994a66531c6216b17157d0dde2f9c"
                },
                "specification": "CHECK( init(main()), LTL(G ! call(reach_error())) )",
                "data_model": "ILP32",
                "language": "C"
              }
            },
            "location": {
              "file_name": "multivar_1-1.c",
              "file_hash": "511f45a8d763ef520f6d92e4135c8572805994a66531c6216b17157d0dde2f9c",
              "line": 22,
              "column": 0,
              "function": "main"
            },
            "loop_invariant": {
              "string": "(x >= 1024U) && (x <= 4294967295U) && (y == x)",
              "type": "assertion",
              "format": "C"
            }
          }
        ]
      },
      {
        "title": "Loop Invariant Certificate Entry",
        "description": "An loop invariant certificate entry",
        "type": "object",
        "required": [
          "entry_type",
          "metadata",
          "target",
          "certification"
        ],
        "properties": {
          "entry_type": {
            "const": "loop_invariant_certificate",
            "description": "The type of this entry. The format is specific to the entry type. In this case, the entry type declares that the entry contains a loop invariant certificate."
          },
          "metadata": {
            "$ref": "#/$defs/metadata-certificate",
            "description": "Additional information about the \"environment\" in which the entry was produced."
          },
          "target": {
            "$ref": "#/$defs/target",
            "description": "Target entry which this entry certifies, i.e., at which the loop invariant was validated."
          },
          "certification": {
            "$ref": "#/$defs/certification",
            "description": "Actual loop invariant certificate."
          }
        },
        "examples": [
          {
            "entry_type": "loop_invariant_certificate",
            "metadata": {
              "format_version": 0.1,
              "uuid": "954affa9-32e4-4b35-85ae-888da3a6a53b",
              "creation_time": "2021-05-05T13:18:43.000Z",
              "producer": {
                "name": "CPAchecker",
                "version": "2.0.1-svn",
                "configuration": "(Optional) svcomp21--04-kInduction",
                "description": "(Optional)",
                "command_line": "(Optional)"
              }
            },
            "target": {
              "uuid": "91023a0f-9f45-4385-88c4-1152ade45537",
              "type": "loop-invariant",
              "file_hash": "XXXf45a8d763ef520f6d92e4135c8572805994a66531c6216b17157d0dde2f9c"
            },
            "certification": {
              "string": "confirmed",
              "type": "verdict",
              "format": "confirmed | rejected"
            }
          }
        ]
      }
    ]
  }
}